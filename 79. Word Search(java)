class Solution { 
    static boolean flag=false;
    public boolean exist(char[][] board, String word) {
        flag=false;
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(board[i][j]==word.charAt(0))
                {                
                    maze(board,new boolean[board.length][board[0].length],i,j,word,0);
                    if(flag)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    public static void maze(char[][] board,boolean[][] visited,int row,int col,String word,int index)
    {
        
        
        if (row == -1 || row == board.length || col == -1 || col == board[0].length
				|| board[row][col] != word.charAt(index) || visited[row][col]) {
			return;
        }
        
        if(index==word.length()-1)
        {
            flag=true;
            return;
        }
        visited[row][col]=true;
        maze(board,visited,row-1,col,word,index+1);
        maze(board,visited,row+1,col,word,index+1);
        maze(board,visited,row,col-1,word,index+1);
        maze(board,visited,row,col+1,word,index+1);
        visited[row][col]=false;
    }
}
